generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    ShortList     ShortList[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Book {
    id          String        @id @default(cuid())
    title       String
    firstAuthor String
    ShortList   ShortList?    @relation(fields: [shortListId], references: [id])
    shortListId String?
    gutenDexId  Int           @unique
    Reservation Reservation[]

    @@unique([title, firstAuthor])
}

model ShortList {
    id     String @id @default(cuid())
    books  Book[]
    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    @@unique([id, userId])
}

model Reservation {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    book      Book     @relation(fields: [bookId], references: [id])
    bookId    String
    username  String
    start     DateTime
    end       DateTime

    @@index([bookId])
}
